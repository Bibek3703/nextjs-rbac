--
-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
--

-- Custom types
create type public.app_permission as enum ('todos.read', 'todos.update', 'todos.delete');
create type public.app_role as enum ('ADMIN', 'MODERATOR');
create type public.user_status as enum ('ONLINE', 'OFFLINE');
create type public.todo_status as enum ('PROGRESS', 'COMPLETED', 'CANCELLED');

-- USERS
create table public.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  username    text unique,
  status      user_status default 'OFFLINE'::public.user_status,
  full_name   text,
  avatar_url  text,
  website     text,
  created_at timestamp with time zone,
  updated_at timestamp with time zone
);
comment on table public.users is 'Profile data for each user.';
comment on column public.users.id is 'References the internal Supabase Auth user.';

-- TODOS
create table public.todos (
  id            bigint generated by default as identity primary key,
  title         text not null unique,
  description   text,
  status        todo_status default 'PROGRESS'::public.todo_status,
  created_at    timestamp with time zone default timezone('utc'::text, now()) not null,
  created_by    uuid references public.users not null,
  updated_at    timestamp with time zone default timezone('utc'::text, now()) not null
);
comment on table public.todos is 'Todo data for each user.';



-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';


-- authorize with role-based access control (RBAC)
create function public.authorize(
  requested_permission app_permission,
  user_id uuid
)
returns boolean as
$$
  declare
    bind_permissions int;
  begin
    select
      count(*)
    from public.role_permissions
    inner join public.user_roles on role_permissions.role = user_roles.role
    where
      role_permissions.permission = authorize.requested_permission and
      user_roles.user_id = authorize.user_id
    into bind_permissions;

    return bind_permissions > 0;
  end;
$$
language plpgsql security definer;

-- Secure the tables
alter table public.users
  enable row level security;
alter table public.todos
  enable row level security;
alter table public.user_roles
  enable row level security;
alter table public.role_permissions
  enable row level security;

create policy "Allow logged-in read access" on public.users
  for select using (auth.role() = 'authenticated');

create policy "Allow individual insert access" on public.users
  for insert with check ((select auth.uid()) = id);

create policy "Allow individual update access" on public.users
  for update using ( (select auth.uid()) = id );

create policy "Allow individual read access" on public.todos
  for select using ((select auth.uid()) = created_by);

create policy "Allow individual insert access" on public.todos
  for insert with check ((select auth.uid()) = created_by);

create policy "Allow individual delete access" on public.todos
  for delete using ((select auth.uid()) = created_by);

create policy "Allow authorized read access" on public.todos
  for delete using (authorize('todos.read', auth.uid()));

create policy "Allow authorized update access" on public.todos
  for delete using (authorize('todos.update', auth.uid()));

create policy "Allow authorized delete access" on public.todos
  for delete using (authorize('todos.delete', auth.uid()));

create policy "Allow individual read access" on public.user_roles
  for select using ((select auth.uid()) = user_id);

-- Send "previous data" on change
alter table public.users
  replica identity full;
alter table public.todos
  replica identity full;

-- inserts a row into public.users and assigns roles
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
  declare is_admin boolean;
  begin
    insert into public.users (id, username, full_name, avatar_url)
    values (
        new.id,
        COALESCE(new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'email'),
        new.raw_user_meta_data->>'full_name',
        new.raw_user_meta_data->>'avatar_url'
    );

    insert into public.user_roles (user_id, role) values (new.id, 'ADMIN');

    return new;
  end;
$$ language plpgsql security definer;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */

-- begin;
--   remove the realtime publication
--   drop publication if exists supabase_realtime;

-- re-create the publication but don't enable it for any tables
-- create publication supabase_realtime;
-- commit;

-- add tables to the publication
-- alter publication supabase_realtime add table public.todos;
-- alter publication supabase_realtime add table public.users;

-- DUMMY DATA
-- insert into public.users (id, username)
-- values
--     ('8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e', 'supabot');

-- insert into public.channels (slug, created_by)
-- values
--     ('public', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
--     ('random', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');

-- insert into public.messages (message, channel_id, user_id)
-- values
--     ('Hello World ðŸ‘‹', 1, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
--     ('Perfection is attained, not when there is nothing more to add, but when there is nothing left to take away.', 2, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');

insert into public.role_permissions (role, permission)
values
    ('ADMIN', 'todos.read'),
    ('ADMIN', 'todos.update'),
    ('ADMIN', 'todos.delete'),
    ('MODERATOR', 'todos.delete');


-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');